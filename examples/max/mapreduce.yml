package main

import (
	// Import the entire framework
	_ "github.com/ReconfigureIO/sdaccel"
	arbitrate "github.com/ReconfigureIO/sdaccel/axi/arbitrate"
	aximemory "github.com/ReconfigureIO/sdaccel/axi/memory"
	axiprotocol "github.com/ReconfigureIO/sdaccel/axi/protocol"
)

func Top(
	inputData uintptr,
	outputData uintptr,

	length uint32,
	// The second set of arguments will be the ports for interacting with memory
	memReadAddr chan<- axiprotocol.Addr,
	memReadData <-chan axiprotocol.ReadData,

	memWriteAddr chan<- axiprotocol.Addr,
	memWriteData chan<- axiprotocol.WriteData,
	memWriteResp <-chan axiprotocol.WriteResp) {

	// Read all of the input data into a channel
	inputChan := make(chan uint32, 16)

	go aximemory.ReadBurstUInt32(
		memReadAddr, memReadData, true, inputData, length*(32/32), inputChan)

	// Read all of the input data into a channel
	elementChan := make(chan uint32, 1)
	go Deserialize(inputChan, elementChan)

	// Read all of the input data into a channel
	// dataChan := make(chan [16]uint32, 1)

	data0 := make(chan uint32, 1)

	data1 := make(chan uint32, 1)

	data2 := make(chan uint32, 1)

	data3 := make(chan uint32, 1)

	data4 := make(chan uint32, 1)

	data5 := make(chan uint32, 1)

	data6 := make(chan uint32, 1)

	data7 := make(chan uint32, 1)

	data8 := make(chan uint32, 1)

	data9 := make(chan uint32, 1)

	data10 := make(chan uint32, 1)

	data11 := make(chan uint32, 1)

	data12 := make(chan uint32, 1)

	data13 := make(chan uint32, 1)

	data14 := make(chan uint32, 1)

	data15 := make(chan uint32, 1)

	// Dispatch
	go func() {
		for n := length; n != 0; {
			for i := uint8(0); i < 16; i++ {
				var el uint32
				if uint32(i) < n {
					el = <-elementChan
				} else {
					el = [1]uint32{}[0]
				}

				el0 := el

				el1 := el

				el2 := el

				el3 := el

				el4 := el

				el5 := el

				el6 := el

				el7 := el

				el8 := el

				el9 := el

				el10 := el

				el11 := el

				el12 := el

				el13 := el

				el14 := el

				el15 := el

				switch i {

				case 0:
					data0 <- el0

				case 1:
					data1 <- el1

				case 2:
					data2 <- el2

				case 3:
					data3 <- el3

				case 4:
					data4 <- el4

				case 5:
					data5 <- el5

				case 6:
					data6 <- el6

				case 7:
					data7 <- el7

				case 8:
					data8 <- el8

				case 9:
					data9 <- el9

				case 10:
					data10 <- el10

				case 11:
					data11 <- el11

				case 12:
					data12 <- el12

				case 13:
					data13 <- el13

				case 14:
					data14 <- el14

				case 15:
					data15 <- el15

				}
			}

			if n < 16 {
				n = 0
			} else {
				n -= 16
			}
		}
	}()

	val := make(chan uint32, 1)

	// Mapper part

	c0 := make(chan uint32, 1)
	go func() {
		for {

			c0 <- Identity(<-data0)

		}
	}()

	c1 := make(chan uint32, 1)
	go func() {
		for {

			c1 <- Identity(<-data1)

		}
	}()

	c2 := make(chan uint32, 1)
	go func() {
		for {

			c2 <- Identity(<-data2)

		}
	}()

	c3 := make(chan uint32, 1)
	go func() {
		for {

			c3 <- Identity(<-data3)

		}
	}()

	c4 := make(chan uint32, 1)
	go func() {
		for {

			c4 <- Identity(<-data4)

		}
	}()

	c5 := make(chan uint32, 1)
	go func() {
		for {

			c5 <- Identity(<-data5)

		}
	}()

	c6 := make(chan uint32, 1)
	go func() {
		for {

			c6 <- Identity(<-data6)

		}
	}()

	c7 := make(chan uint32, 1)
	go func() {
		for {

			c7 <- Identity(<-data7)

		}
	}()

	c8 := make(chan uint32, 1)
	go func() {
		for {

			c8 <- Identity(<-data8)

		}
	}()

	c9 := make(chan uint32, 1)
	go func() {
		for {

			c9 <- Identity(<-data9)

		}
	}()

	c10 := make(chan uint32, 1)
	go func() {
		for {

			c10 <- Identity(<-data10)

		}
	}()

	c11 := make(chan uint32, 1)
	go func() {
		for {

			c11 <- Identity(<-data11)

		}
	}()

	c12 := make(chan uint32, 1)
	go func() {
		for {

			c12 <- Identity(<-data12)

		}
	}()

	c13 := make(chan uint32, 1)
	go func() {
		for {

			c13 <- Identity(<-data13)

		}
	}()

	c14 := make(chan uint32, 1)
	go func() {
		for {

			c14 <- Identity(<-data14)

		}
	}()

	c15 := make(chan uint32, 1)
	go func() {
		for {

			c15 <- Identity(<-data15)

		}
	}()

	// Reducer part

	c16 := make(chan uint32, 1)
	go func() {
		for {
			c16 <- Max(<-c0, <-c1)
		}
	}()

	c17 := make(chan uint32, 1)
	go func() {
		for {
			c17 <- Max(<-c2, <-c3)
		}
	}()

	c18 := make(chan uint32, 1)
	go func() {
		for {
			c18 <- Max(<-c4, <-c5)
		}
	}()

	c19 := make(chan uint32, 1)
	go func() {
		for {
			c19 <- Max(<-c6, <-c7)
		}
	}()

	c20 := make(chan uint32, 1)
	go func() {
		for {
			c20 <- Max(<-c8, <-c9)
		}
	}()

	c21 := make(chan uint32, 1)
	go func() {
		for {
			c21 <- Max(<-c10, <-c11)
		}
	}()

	c22 := make(chan uint32, 1)
	go func() {
		for {
			c22 <- Max(<-c12, <-c13)
		}
	}()

	c23 := make(chan uint32, 1)
	go func() {
		for {
			c23 <- Max(<-c14, <-c15)
		}
	}()

	c24 := make(chan uint32, 1)
	go func() {
		for {
			c24 <- Max(<-c16, <-c17)
		}
	}()

	c25 := make(chan uint32, 1)
	go func() {
		for {
			c25 <- Max(<-c18, <-c19)
		}
	}()

	c26 := make(chan uint32, 1)
	go func() {
		for {
			c26 <- Max(<-c20, <-c21)
		}
	}()

	c27 := make(chan uint32, 1)
	go func() {
		for {
			c27 <- Max(<-c22, <-c23)
		}
	}()

	c28 := make(chan uint32, 1)
	go func() {
		for {
			c28 <- Max(<-c24, <-c25)
		}
	}()

	c29 := make(chan uint32, 1)
	go func() {
		for {
			c29 <- Max(<-c26, <-c27)
		}
	}()

	c30 := make(chan uint32, 1)
	go func() {
		for {
			c30 <- Max(<-c28, <-c29)
		}
	}()

	go func() {
		for {
			val <- <-c30
		}
	}()

	retChan := make(chan uint32)
	outputDataChan := make(chan uint32)

	go func() {
		var ret uint32
		toRead := uint32(16)
		ret = Uint32Init()
		for n := length; n > 0; n -= toRead {
			if n < toRead {
				toRead = n
			}
			ret = Max(ret, <-val)
		}
		retChan <- ret
	}()

	go Deserialize(retChan, outputDataChan)

	// Write it back to the pointer the host requests
	aximemory.WriteBurstUInt32(
		memWriteAddr, memWriteData, memWriteResp, true, outputData, 32/32, outputDataChan)
}
